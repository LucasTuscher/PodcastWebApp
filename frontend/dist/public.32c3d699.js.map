{"mappings":"AAAA,eAAe,8BAA8B,OAAO;IAChD,IAAI;QACA,MAAM,eAAe,MAAM,aAAa,QAAQ,EAAE;QAClD,MAAM,cAAc;YAChB,IAAI,QAAQ,EAAE;YACd,OAAO,QAAQ,KAAK;YACpB,QAAQ,QAAQ,MAAM;YACtB,aAAa,QAAQ,WAAW;YAChC,gBAAgB,QAAQ,cAAc;YACtC,UAAU,aAAa,IAAI;QAC/B;QACA,WAAW,iBAAiB;QAC5B;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,mCAAmC;IACrD;AACJ;AAEA,eAAe,aAAa,SAAS;IACjC,MAAM,WAAW,MAAM,MAAM,CAAC,oDAAoD,EAAE,WAAW;IAC/F,IAAI,CAAC,SAAS,EAAE,EACZ,MAAM,IAAI,MAAM,6CAA6C,SAAS,UAAU;IAEpF,OAAO,MAAM,SAAS,IAAI;AAC9B","sources":["public/js/details/loadPodcastDetailsNavigate.js"],"sourcesContent":["async function loadPodcastDetailsAndNavigate(podcast) {\n    try {\n        const episodesData = await loadEpisodes(podcast.id);\n        const podcastData = {\n            id: podcast.id,\n            title: podcast.title,\n            author: podcast.author,\n            description: podcast.description,\n            layoutImageURL: podcast.layoutImageURL,\n            episodes: episodesData.data\n        };\n        navigateTo('podcastDetail', podcastData);\n        resetSearch();\n    } catch (error) {\n        console.error('Fehler beim Laden der Episoden:', error);\n    }\n}\n\nasync function loadEpisodes(podcastId) {\n    const response = await fetch(`https://api.fyyd.de/0.2/podcast/episodes?podcast_id=${podcastId}`);\n    if (!response.ok) {\n        throw new Error('Fehler beim Abrufen der Episoden-Daten: ' + response.statusText);\n    }\n    return await response.json();\n}\n"],"names":[],"version":3,"file":"public.32c3d699.js.map","sourceRoot":"/__parcel_source_root/"}