{"mappings":"AAAA,IAAI,cAAc;AAClB,MAAM,QAAQ,GAAG,kCAAkC;AAEnD,mCAAmC;AACnC,SAAS;IACL,IAAI,QAAQ,SAAS,cAAc,CAAC,eAAe,KAAK,CAAC,IAAI;IAC7D,IAAI,gBAAgB,SAAS,cAAc,CAAC;IAC5C,IAAI,UAAU,SAAS,cAAc,CAAC;IACtC,IAAI,qBAAqB,SAAS,aAAa,CAAC;IAChD,IAAI,cAAc,SAAS,cAAc,CAAC;IAE1C,IAAI,CAAC,OAAO;QACR,QAAQ,SAAS,GAAG;QACpB,cAAc,WAAW,GAAG;QAC5B,mBAAmB,SAAS,CAAC,MAAM,CAAC;QACpC,YAAY,KAAK,CAAC,OAAO,GAAG;QAC5B,cAAc;QACd;IACJ;IAEA,mBAAmB,SAAS,CAAC,GAAG,CAAC;IACjC,cAAc,WAAW,GAAG;IAC5B,QAAQ,SAAS,GAAG;IACpB,YAAY,KAAK,CAAC,OAAO,GAAG;IAC5B,cAAc;IAEd,MAAM,CAAC,6CAA6C,EAAE,mBAAmB,OAAO,OAAO,EAAE,OAAO,EAC3F,IAAI,CAAC,CAAA;QACF,IAAI,CAAC,SAAS,EAAE,EACZ,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAE5D,cAAc,WAAW,GAAG,CAAC,aAAa,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;QACpF,OAAO,SAAS,IAAI;IACxB,GACC,IAAI,CAAC,CAAA;QACF,IAAI,WAAW,KAAK,IAAI;QAExB,SAAS,KAAK,CAAC,GAAG,OAAO,OAAO,CAAC,CAAC;YAC9B,IAAI,eAAe,OAAO;YAC1B,IAAI,MAAM,SAAS,aAAa,CAAC;YACjC,IAAI,SAAS,GAAG;YAChB,IAAI,SAAS,GAAG,CAAC;;;;wFAIuD,EAAE,QAAQ,cAAc,CAAC;;;6EAGpC,EAAE,QAAQ,KAAK,CAAC;;;;gBAI7E,CAAC;YACD,IAAI,aAAa,CAAC,sCAAsC,gBAAgB,CAAC,SAAS;gBAC9E,8BAA8B;YAClC;YACA,QAAQ,WAAW,CAAC;YACpB;QACJ;QAEA,IAAI,gBAAgB,GAChB,cAAc,WAAW,GAAG;aAE5B,cAAc,WAAW,GAAG,GAAG,YAAY,qBAAqB,CAAC;IAEzE,GACC,KAAK,CAAC,CAAA;QACH,cAAc,WAAW,GAAG,2BAA2B,MAAM,OAAO;IACxE;AACR;AAEA,sCAAsC;AACtC,SAAS;IACL,SAAS,cAAc,CAAC,eAAe,KAAK,GAAG;IAC/C,SAAS,cAAc,CAAC,iBAAiB,WAAW,GAAG;IACvD,SAAS,cAAc,CAAC,WAAW,SAAS,GAAG;IAC/C,SAAS,aAAa,CAAC,oCAAoC,SAAS,CAAC,MAAM,CAAC;IAC5E,SAAS,cAAc,CAAC,eAAe,KAAK,CAAC,OAAO,GAAG;IACvD,cAAc;AAClB;AAEA,SAAS;IACL,IAAI,OAAO,UAAU,GAAG,KACpB;AAER;AACA,OAAO,gBAAgB,CAAC,QAAQ;AAChC,OAAO,gBAAgB,CAAC,UAAU;AAElC,wCAAwC;AACxC,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,SAAS;AAEjE,6HAA6H;AAC7H,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,SAAS;IAC7D,SAAS,cAAc,CAAC,eAAe,KAAK,CAAC,OAAO,GAAG;IACvD,kBAAkB,iDAAiD;AACvE;AAEA,gEAAgE;AAChE,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,WAAW,CAAC;IAChE,IAAI,MAAM,GAAG,KAAK,SACd;AAER","sources":["public/js/search/speedSearch.js"],"sourcesContent":["let resultCount = 0;\nconst count = 6; // Anzahl der maximalen Ergebnisse\n\n// Funktion zur Suche nach Podcasts\nfunction searchPodcasts() {\n    let query = document.getElementById(\"searchQuery\").value.trim();\n    let statusMessage = document.getElementById(\"statusMessage\");\n    let results = document.getElementById(\"results\");\n    let activeSearchSystem = document.querySelector(\".sidebar-search-result-container\");\n    let closeButton = document.getElementById(\"closeButton\");\n\n    if (!query) {\n        results.innerHTML = '';\n        statusMessage.textContent = '';\n        activeSearchSystem.classList.remove(\"active\");\n        closeButton.style.display = 'none';\n        resultCount = 0;\n        return;\n    }\n\n    activeSearchSystem.classList.add(\"active\");\n    statusMessage.textContent = \"Suche läuft...\";\n    results.innerHTML = '';\n    closeButton.style.display = 'block';\n    resultCount = 0;\n\n    fetch(`https://api.fyyd.de/0.2/search/podcast?title=${encodeURIComponent(query)}&count=${count}`)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            statusMessage.textContent = `Such Status: ${response.status} ${response.statusText}`;\n            return response.json();\n        })\n        .then(data => {\n            let podcasts = data.data;\n\n            podcasts.slice(0, count).forEach((podcast) => {\n                if (resultCount >= count) return;\n                let div = document.createElement('div');\n                div.className = 'podcast';\n                div.innerHTML = `\n                    <div class=\"sidebar-search-result-main-container\">\n                        <button class=\"sidebar-search-result-main-button\" style=\"position:relative;z-index:100;\">\n                            <div class=\"sidebar-search-result-main-image-container\">\n                                <img class=\"sidebar-search-result-main-image lazy\" src=\"${podcast.layoutImageURL}\" alt=\"Bild des Podcasts\">\n                            </div>\n                            <div class=\"sidebar-search-result-main-title-container\">\n                                <h2 class=\"sidebar-search-result-main-title\">${podcast.title}</h2>\n                            </div>\n                       </button>\n                    </div>\n                `;\n                div.querySelector('.sidebar-search-result-main-button').addEventListener('click', () => {\n                    loadPodcastDetailsAndNavigate(podcast);\n                });\n                results.appendChild(div);\n                resultCount++;\n            });\n\n            if (resultCount === 0) {\n                statusMessage.textContent = 'Keine Ergebnisse gefunden.';\n            } else {\n                statusMessage.textContent = `${resultCount} Ergebnisse gefunden.`;\n            }\n        })\n        .catch(error => {\n            statusMessage.textContent = 'Fehler bei der Suche: ' + error.message;\n        });\n}\n\n// Funktion zum Zurücksetzen der Suche\nfunction resetSearch() {\n    document.getElementById(\"searchQuery\").value = '';\n    document.getElementById(\"statusMessage\").textContent = '';\n    document.getElementById(\"results\").innerHTML = '';\n    document.querySelector(\".sidebar-search-result-container\").classList.remove(\"active\");\n    document.getElementById(\"closeButton\").style.display = 'none';\n    resultCount = 0;\n}\n\nfunction checkScreenWidth() {\n    if (window.innerWidth < 650) {\n        resetSearch();\n    }\n}\nwindow.addEventListener('load', checkScreenWidth);\nwindow.addEventListener('resize', checkScreenWidth);\n\n// Event-Listener für den \"Close\"-Button\ndocument.getElementById(\"closeButton\").addEventListener('click', resetSearch);\n\n// Event-Listener für das Suchfeld, um den \"Close\"-Button anzuzeigen und die Suche auszuführen, wenn das Feld fokussiert wird\ndocument.getElementById(\"searchQuery\").addEventListener('focus', () => {\n    document.getElementById(\"closeButton\").style.display = 'block';\n    searchPodcasts(); // Suche ausführen, wenn das Feld fokussiert wird\n});\n\n// Event-Listener für die Eingabetaste, um die Suche auszuführen\ndocument.getElementById(\"searchQuery\").addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n        searchPodcasts();\n    }\n});\n"],"names":[],"version":3,"file":"public.8c99972d.js.map","sourceRoot":"/__parcel_source_root/"}