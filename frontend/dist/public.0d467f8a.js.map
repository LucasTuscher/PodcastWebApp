{"mappings":"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","sources":["public/js/details/slider.js"],"sourcesContent":["async function loadSlider() {\n    const scriptStartTime = performance.now();\n\n    const sliderContainer = document.querySelector('.main-body-main_page-slider-container');\n    const slider = document.querySelector('.slider');\n    const loading = document.querySelector('.loading');\n\n    if (!sliderContainer || !slider || !loading) {\n        console.error(\"Slider-Elemente nicht gefunden im DOM.\");\n        return;\n    }\n\n    const count = 12;\n\n    loading.style.display = 'block';\n    sliderContainer.style.display = 'none';\n\n    slider.innerHTML = '';\n\n    try {\n        const fetchStartTime = performance.now();\n        const response = await fetch(`https://api.fyyd.de/0.2/podcast/latest?count=${count}&language=de`);\n        const fetchEndTime = performance.now();\n        const fetchDuration = fetchEndTime - fetchStartTime;\n\n        if (!response.ok) {\n            throw new Error('Fehler beim Abrufen der Podcast-Daten: ' + response.statusText);\n        }\n\n        const data = await response.json();\n\n        const loadEpisodes = async (podcastId) => {\n            const episodesFetchStartTime = performance.now();\n            const response = await fetch(`https://api.fyyd.de/0.2/podcast/episodes?podcast_id=${podcastId}`);\n            const episodesFetchEndTime = performance.now();\n            const episodesFetchDuration = episodesFetchEndTime - episodesFetchStartTime;\n\n            if (!response.ok) {\n                throw new Error('Fehler beim Abrufen der Episoden-Daten: ' + response.statusText);\n            }\n            return await response.json();\n        };\n\n        const loadPodcastDetails = async (podcast) => {\n            try {\n                const episodesData = await loadEpisodes(podcast.id);\n                return {\n                    id: podcast.id,\n                    title: podcast.title,\n                    author: podcast.author,\n                    description: podcast.description,\n                    layoutImageURL: podcast.layoutImageURL,\n                    episodes: episodesData.data\n                };\n            } catch (error) {\n                console.error('Fehler beim Laden der Episoden:', error);\n                return {\n                    id: podcast.id,\n                    title: podcast.title,\n                    author: podcast.author,\n                    description: podcast.description,\n                    layoutImageURL: podcast.layoutImageURL,\n                    episodes: []\n                };\n            }\n        };\n\n        const addPodcastImageToSlider = async (podcast) => {\n            const img = document.createElement('img');\n            img.classList.add('slider-image');\n            img.src = podcast.layoutImageURL;\n            img.alt = podcast.title;\n            img.loading = 'lazy';\n            img.dataset.podcast = JSON.stringify(await loadPodcastDetails(podcast));\n\n            img.addEventListener('click', () => {\n                try {\n                    const podcastData = JSON.parse(img.dataset.podcast);\n                    navigateTo('podcastDetail', podcastData);\n                } catch (parseError) {\n                    console.error('Fehler beim Parsen der Podcast-Daten:', parseError);\n                }\n            });\n\n            slider.appendChild(img);\n        };\n\n        const sliderStartTime = performance.now();\n\n        const podcastPromises = data.data.map(addPodcastImageToSlider);\n        await Promise.all(podcastPromises);\n\n        const sliderEndTime = performance.now();\n        const sliderDuration = sliderEndTime - sliderStartTime;\n\n\n        loading.style.display = 'none';\n        sliderContainer.style.display = 'block';\n\n        document.querySelectorAll('.progress-bar').forEach(calculateProgressBar);\n\n        window.addEventListener('resize', debounce(() => {\n            document.querySelectorAll('.progress-bar').forEach(calculateProgressBar);\n        }, 250));\n\n    } catch (error) {\n        console.error('Fehler:', error);\n    } finally {\n        const scriptEndTime = performance.now();\n        const scriptDuration = scriptEndTime - scriptStartTime;\n    }\n}\n\nfunction calculateProgressBar(progressBar) {\n    progressBar.innerHTML = \"\";\n    const slider = progressBar.closest(\".main-body-main_page-slider-container\").querySelector(\".slider\");\n    const itemCount = slider.children.length;\n    if (itemCount === 0) return; // Prevent error if no children\n\n    const itemsPerScreen = getItemsPerScreen(slider);\n    let sliderIndex = parseInt(getComputedStyle(slider).getPropertyValue(\"--slider-index\"));\n    const progressBarItemCount = Math.ceil(itemCount / itemsPerScreen);\n\n    if (sliderIndex >= progressBarItemCount) {\n        slider.style.setProperty(\"--slider-index\", progressBarItemCount - 1);\n        sliderIndex = progressBarItemCount - 1;\n    }\n\n    for (let i = 0; i < progressBarItemCount; i++) {\n        const barItem = document.createElement(\"div\");\n        barItem.classList.add(\"progress-item\");\n        if (i === sliderIndex) {\n            barItem.classList.add(\"active\");\n        }\n        progressBar.append(barItem);\n    }\n}\n\nfunction getItemsPerScreen(slider) {\n    if (slider.children.length === 0) return 1; // Default value if no children\n    const itemWidth = slider.children[0].getBoundingClientRect().width;\n    const sliderWidth = slider.getBoundingClientRect().width;\n    return Math.floor(sliderWidth / itemWidth);\n}\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function (...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n}\n\ndocument.addEventListener(\"click\", e => {\n    let handle;\n    if (e.target.matches(\".handle\")) {\n        handle = e.target;\n    } else {\n        handle = e.target.closest(\".handle\");\n    }\n    if (handle != null) onHandleClick(handle);\n});\n\nfunction onHandleClick(handle) {\n    const progressBar = handle.closest(\".main-body-main_page-slider-container\").querySelector(\".progress-bar\");\n    const slider = handle.closest(\".main-body-main_page-slider-container\").querySelector(\".slider\");\n    let sliderIndex = parseInt(getComputedStyle(slider).getPropertyValue(\"--slider-index\"));\n    const itemsPerScreen = getItemsPerScreen(slider);\n    const itemCount = slider.children.length;\n    const progressBarItemCount = Math.ceil(itemCount / itemsPerScreen);\n\n    if (handle.classList.contains(\"left-handle\")) {\n        sliderIndex = (sliderIndex - 1 + progressBarItemCount) % progressBarItemCount;\n    }\n\n    if (handle.classList.contains(\"right-handle\")) {\n        sliderIndex = (sliderIndex + 1) % progressBarItemCount;\n    }\n\n    slider.style.setProperty(\"--slider-index\", sliderIndex);\n\n    // Update the classes for the progress items\n    progressBar.querySelectorAll(\".progress-item\").forEach((item, index) => {\n        if (index === sliderIndex) {\n            item.classList.add(\"active\");\n        } else {\n            item.classList.remove(\"active\");\n        }\n    });\n}"],"names":[],"version":3,"file":"public.0d467f8a.js.map","sourceRoot":"/__parcel_source_root/"}